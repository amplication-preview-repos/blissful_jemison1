/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DataRequestUser as PrismaDataRequestUser,
  Company as PrismaCompany,
} from "@prisma/client";

export class DataRequestUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataRequestUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataRequestUser.count(args);
  }

  async dataRequestUsers(
    args: Prisma.DataRequestUserFindManyArgs
  ): Promise<PrismaDataRequestUser[]> {
    return this.prisma.dataRequestUser.findMany(args);
  }
  async dataRequestUser(
    args: Prisma.DataRequestUserFindUniqueArgs
  ): Promise<PrismaDataRequestUser | null> {
    return this.prisma.dataRequestUser.findUnique(args);
  }
  async createDataRequestUser(
    args: Prisma.DataRequestUserCreateArgs
  ): Promise<PrismaDataRequestUser> {
    return this.prisma.dataRequestUser.create(args);
  }
  async updateDataRequestUser(
    args: Prisma.DataRequestUserUpdateArgs
  ): Promise<PrismaDataRequestUser> {
    return this.prisma.dataRequestUser.update(args);
  }
  async deleteDataRequestUser(
    args: Prisma.DataRequestUserDeleteArgs
  ): Promise<PrismaDataRequestUser> {
    return this.prisma.dataRequestUser.delete(args);
  }

  async findCompany(
    parentId: string,
    args: Prisma.CompanyFindManyArgs
  ): Promise<PrismaCompany[]> {
    return this.prisma.dataRequestUser
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .company(args);
  }
}
