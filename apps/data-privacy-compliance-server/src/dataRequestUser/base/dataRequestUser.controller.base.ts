/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataRequestUserService } from "../dataRequestUser.service";
import { DataRequestUserCreateInput } from "./DataRequestUserCreateInput";
import { DataRequestUser } from "./DataRequestUser";
import { DataRequestUserFindManyArgs } from "./DataRequestUserFindManyArgs";
import { DataRequestUserWhereUniqueInput } from "./DataRequestUserWhereUniqueInput";
import { DataRequestUserUpdateInput } from "./DataRequestUserUpdateInput";
import { CompanyFindManyArgs } from "../../company/base/CompanyFindManyArgs";
import { Company } from "../../company/base/Company";
import { CompanyWhereUniqueInput } from "../../company/base/CompanyWhereUniqueInput";

export class DataRequestUserControllerBase {
  constructor(protected readonly service: DataRequestUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataRequestUser })
  async createDataRequestUser(
    @common.Body() data: DataRequestUserCreateInput
  ): Promise<DataRequestUser> {
    return await this.service.createDataRequestUser({
      data: data,
      select: {
        companyLookup: true,
        companyRelation: true,
        createdAt: true,
        createdDateTime: true,
        id: true,
        requestCreatedAt: true,
        requestStatus: true,
        statusOptionSet: true,
        updatedAt: true,
        userLookup: true,
        userRelation: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataRequestUser] })
  @ApiNestedQuery(DataRequestUserFindManyArgs)
  async dataRequestUsers(
    @common.Req() request: Request
  ): Promise<DataRequestUser[]> {
    const args = plainToClass(DataRequestUserFindManyArgs, request.query);
    return this.service.dataRequestUsers({
      ...args,
      select: {
        companyLookup: true,
        companyRelation: true,
        createdAt: true,
        createdDateTime: true,
        id: true,
        requestCreatedAt: true,
        requestStatus: true,
        statusOptionSet: true,
        updatedAt: true,
        userLookup: true,
        userRelation: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataRequestUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataRequestUser(
    @common.Param() params: DataRequestUserWhereUniqueInput
  ): Promise<DataRequestUser | null> {
    const result = await this.service.dataRequestUser({
      where: params,
      select: {
        companyLookup: true,
        companyRelation: true,
        createdAt: true,
        createdDateTime: true,
        id: true,
        requestCreatedAt: true,
        requestStatus: true,
        statusOptionSet: true,
        updatedAt: true,
        userLookup: true,
        userRelation: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataRequestUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataRequestUser(
    @common.Param() params: DataRequestUserWhereUniqueInput,
    @common.Body() data: DataRequestUserUpdateInput
  ): Promise<DataRequestUser | null> {
    try {
      return await this.service.updateDataRequestUser({
        where: params,
        data: data,
        select: {
          companyLookup: true,
          companyRelation: true,
          createdAt: true,
          createdDateTime: true,
          id: true,
          requestCreatedAt: true,
          requestStatus: true,
          statusOptionSet: true,
          updatedAt: true,
          userLookup: true,
          userRelation: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataRequestUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataRequestUser(
    @common.Param() params: DataRequestUserWhereUniqueInput
  ): Promise<DataRequestUser | null> {
    try {
      return await this.service.deleteDataRequestUser({
        where: params,
        select: {
          companyLookup: true,
          companyRelation: true,
          createdAt: true,
          createdDateTime: true,
          id: true,
          requestCreatedAt: true,
          requestStatus: true,
          statusOptionSet: true,
          updatedAt: true,
          userLookup: true,
          userRelation: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/company")
  @ApiNestedQuery(CompanyFindManyArgs)
  async findCompany(
    @common.Req() request: Request,
    @common.Param() params: DataRequestUserWhereUniqueInput
  ): Promise<Company[]> {
    const query = plainToClass(CompanyFindManyArgs, request.query);
    const results = await this.service.findCompany(params.id, {
      ...query,
      select: {
        address: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/company")
  async connectCompany(
    @common.Param() params: DataRequestUserWhereUniqueInput,
    @common.Body() body: CompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      company: {
        connect: body,
      },
    };
    await this.service.updateDataRequestUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/company")
  async updateCompany(
    @common.Param() params: DataRequestUserWhereUniqueInput,
    @common.Body() body: CompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      company: {
        set: body,
      },
    };
    await this.service.updateDataRequestUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/company")
  async disconnectCompany(
    @common.Param() params: DataRequestUserWhereUniqueInput,
    @common.Body() body: CompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      company: {
        disconnect: body,
      },
    };
    await this.service.updateDataRequestUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
