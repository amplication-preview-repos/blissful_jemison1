/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataRequestUser } from "./DataRequestUser";
import { DataRequestUserCountArgs } from "./DataRequestUserCountArgs";
import { DataRequestUserFindManyArgs } from "./DataRequestUserFindManyArgs";
import { DataRequestUserFindUniqueArgs } from "./DataRequestUserFindUniqueArgs";
import { CreateDataRequestUserArgs } from "./CreateDataRequestUserArgs";
import { UpdateDataRequestUserArgs } from "./UpdateDataRequestUserArgs";
import { DeleteDataRequestUserArgs } from "./DeleteDataRequestUserArgs";
import { CompanyFindManyArgs } from "../../company/base/CompanyFindManyArgs";
import { Company } from "../../company/base/Company";
import { DataRequestUserService } from "../dataRequestUser.service";
@graphql.Resolver(() => DataRequestUser)
export class DataRequestUserResolverBase {
  constructor(protected readonly service: DataRequestUserService) {}

  async _dataRequestUsersMeta(
    @graphql.Args() args: DataRequestUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataRequestUser])
  async dataRequestUsers(
    @graphql.Args() args: DataRequestUserFindManyArgs
  ): Promise<DataRequestUser[]> {
    return this.service.dataRequestUsers(args);
  }

  @graphql.Query(() => DataRequestUser, { nullable: true })
  async dataRequestUser(
    @graphql.Args() args: DataRequestUserFindUniqueArgs
  ): Promise<DataRequestUser | null> {
    const result = await this.service.dataRequestUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataRequestUser)
  async createDataRequestUser(
    @graphql.Args() args: CreateDataRequestUserArgs
  ): Promise<DataRequestUser> {
    return await this.service.createDataRequestUser({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DataRequestUser)
  async updateDataRequestUser(
    @graphql.Args() args: UpdateDataRequestUserArgs
  ): Promise<DataRequestUser | null> {
    try {
      return await this.service.updateDataRequestUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataRequestUser)
  async deleteDataRequestUser(
    @graphql.Args() args: DeleteDataRequestUserArgs
  ): Promise<DataRequestUser | null> {
    try {
      return await this.service.deleteDataRequestUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Company], { name: "company" })
  async findCompany(
    @graphql.Parent() parent: DataRequestUser,
    @graphql.Args() args: CompanyFindManyArgs
  ): Promise<Company[]> {
    const results = await this.service.findCompany(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
