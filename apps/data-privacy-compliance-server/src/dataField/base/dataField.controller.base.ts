/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataFieldService } from "../dataField.service";
import { DataFieldCreateInput } from "./DataFieldCreateInput";
import { DataField } from "./DataField";
import { DataFieldFindManyArgs } from "./DataFieldFindManyArgs";
import { DataFieldWhereUniqueInput } from "./DataFieldWhereUniqueInput";
import { DataFieldUpdateInput } from "./DataFieldUpdateInput";

export class DataFieldControllerBase {
  constructor(protected readonly service: DataFieldService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataField })
  async createDataField(
    @common.Body() data: DataFieldCreateInput
  ): Promise<DataField> {
    return await this.service.createDataField({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataField] })
  @ApiNestedQuery(DataFieldFindManyArgs)
  async dataFields(@common.Req() request: Request): Promise<DataField[]> {
    const args = plainToClass(DataFieldFindManyArgs, request.query);
    return this.service.dataFields({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataField(
    @common.Param() params: DataFieldWhereUniqueInput
  ): Promise<DataField | null> {
    const result = await this.service.dataField({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataField(
    @common.Param() params: DataFieldWhereUniqueInput,
    @common.Body() data: DataFieldUpdateInput
  ): Promise<DataField | null> {
    try {
      return await this.service.updateDataField({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataField(
    @common.Param() params: DataFieldWhereUniqueInput
  ): Promise<DataField | null> {
    try {
      return await this.service.deleteDataField({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
