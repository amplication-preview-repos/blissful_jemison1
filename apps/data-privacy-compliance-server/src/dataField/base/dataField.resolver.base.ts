/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataField } from "./DataField";
import { DataFieldCountArgs } from "./DataFieldCountArgs";
import { DataFieldFindManyArgs } from "./DataFieldFindManyArgs";
import { DataFieldFindUniqueArgs } from "./DataFieldFindUniqueArgs";
import { DeleteDataFieldArgs } from "./DeleteDataFieldArgs";
import { DataFieldService } from "../dataField.service";
@graphql.Resolver(() => DataField)
export class DataFieldResolverBase {
  constructor(protected readonly service: DataFieldService) {}

  async _dataFieldsMeta(
    @graphql.Args() args: DataFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataField])
  async dataFields(
    @graphql.Args() args: DataFieldFindManyArgs
  ): Promise<DataField[]> {
    return this.service.dataFields(args);
  }

  @graphql.Query(() => DataField, { nullable: true })
  async dataField(
    @graphql.Args() args: DataFieldFindUniqueArgs
  ): Promise<DataField | null> {
    const result = await this.service.dataField(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataField)
  async deleteDataField(
    @graphql.Args() args: DeleteDataFieldArgs
  ): Promise<DataField | null> {
    try {
      return await this.service.deleteDataField(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
